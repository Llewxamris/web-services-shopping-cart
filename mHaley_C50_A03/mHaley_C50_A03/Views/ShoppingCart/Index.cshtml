
@{
    ViewBag.Title = "Index";
}

@Html.Partial("~/Views/Shared/_Header.cshtml")

<h2>Index</h2>
<div class="gridContainer">
<div id="shoppingList">
    <h2>Shopping List</h2>
    <div id="shoppingListZone">
    </div>
</div>

<div id="shoppingCart">
    <h1>Cart</h1>
    <div id="shoppingCartZone">
    </div>
</div>

    <div id="totals">
        <h3>Total Items:</h3><span id="totalEntries"></span>
        <h3>Total Price:</h3><span id="totalValue"></span>
    </div>
    <div id="checkOut">
        <input type="button" id="btnCheckOut" value="Check Out"/>
</div>
    </div>

@section Scripts {
    <script>
        let originalShoppingList; // NAUGHTY

        function displayShoppingList(shoppingListJson) {
            /* Using an array of JSON Objects, displays the objects nicely on
             the web page. */
            originalShoppingList = shoppingListJson; // Saved for later

            shoppingListJson.forEach((obj) => {
                // Define elements
                const entryDiv = document.createElement("div");
                const quantitySpan = document.createElement("div");
                const nameSpan = document.createElement("div");
                const priceSpan = document.createElement("div");
                const categorySpan = document.createElement("div");
                const breakTag = document.createElement('br');

                // Define a single entry
                entryDiv.id = obj.ProductName;
                entryDiv.draggable = true;
                entryDiv.addEventListener('dragstart',
                    ev => {
                        ev.dataTransfer.setData("text/plain", ev.target.id);
                        ev.dropEffect = 'move';
                    });

                // Define the classes
                quantitySpan.className = 'quantity';
                nameSpan.className = 'productName';
                priceSpan.className = 'productPrice';
                categorySpan.className = 'productCategory';

                // Define the content
                quantitySpan.textContent = `Quantity: ${obj.Quantity}`;
                nameSpan.textContent = `Name: ${obj.ProductName}`;
                priceSpan.textContent = `Price: ${obj.ProductPrice}`;
                categorySpan.textContent = `Category: ${obj.ProductCategory}`;

                // Append elements to the entry
                entryDiv.appendChild(quantitySpan);
                entryDiv.appendChild(nameSpan);
                entryDiv.appendChild(priceSpan);
                entryDiv.appendChild(categorySpan);
                entryDiv.appendChild(categorySpan);
                entryDiv.appendChild(breakTag);

                // Append the entry to the page
                document.getElementById("shoppingListZone")
                    .appendChild(entryDiv);
            });

            // Set the totals to zero
            document.getElementById("totalValue").innerText = 0.00;
            document.getElementById("totalEntries").innerText = 0;
        } // displayShoppingList(...)

        function getShoppingList(callback) {
            /* Gets the shopping list via the REST API, takes in a callback
                function that handles the returned data. */
            // ReSharper disable once PossiblyUnassignedPropertys
            // ReSharper disable once UseOfImplicitGlobalInFunctionScope
            
            // URL is defined by razor, deals with possible format errors
            fetch('@Url.Action("", "api/Rest", new {}, null)')
                .then(response => response.json())
                .then(json => {
                    callback(json); // Send data to callback function
                });
        } // getShoppingList(...)

        function updateTotalCost() {
            /* Updates the total cost of the shopping cart. */
            const shoppingCartZone = document
                .getElementById('shoppingCartZone');
            // The current shopping cart entries
            const shoppingCartEntries = shoppingCartZone.childNodes;
            let totalCost = 0.0;

            shoppingCartEntries.forEach(entry => {
                if (entry.nodeType === 1) { // Node type 1's are DOM elements
                    const price = entry.querySelector('.productPrice').innerText
                        .split(' ')[1];
                    const quantity = entry.querySelector('.quantity').innerText
                        .split(' ')[1];
                    totalCost += parseFloat(price) * parseFloat(quantity);
                }
            });
            document.getElementById("totalValue").innerText =
                totalCost.toFixed(2);
        } // updateTotalCost()

        function updateTotalEntries() {
            /* Updates the total entries inside the shopping cart. */
            const shoppingCartZone = document
                .getElementById('shoppingCartZone');
            const shoppingCartEntries = shoppingCartZone.childNodes;
            let totalEntries = 0;

            shoppingCartEntries.forEach(entry => {
                if (entry.nodeType === 1) { // Node type 1's are DOM elements
                    totalEntries++;
                }
            });
            document.getElementById("totalEntries").innerText = totalEntries;
        } // updateTotalEntries()

        (() => {
            /* The following is immediatly invoked. Used for defining
                none-programatically added DOM elements' event listeners, and
                running the initial GET of the shopping list. */
            "use strict";

            // Add 'dragover' listener for the shopping list
            document.getElementById('shoppingListZone').addEventListener('dragover',
                ev => {
                    ev.preventDefault();
                    ev.dataTransfer.dropEffect = "move";
                });

            // Add 'drop' listener for the shopping list
            document.getElementById('shoppingListZone').addEventListener('drop',
                ev => {
                    ev.preventDefault();
                    var data = ev.dataTransfer.getData("text");

                    // Transfer element
                    document.getElementById('shoppingListZone')
                        .appendChild(document.getElementById(data));
                    
                    // Update the totals
                    updateTotalCost();
                    updateTotalEntries();
                });

            // Add 'dragover' listener for the shopping cart
            document.getElementById("shoppingCartZone").addEventListener('dragover',
                ev => {
                    ev.preventDefault();
                    ev.dataTransfer.dropEffect = "move";
                });

            // Add 'drop' listener for the shopping cart
            document.getElementById('shoppingCartZone').addEventListener('drop',
                ev => {
                    ev.preventDefault();
                    var data = ev.dataTransfer.getData("text");

                    // Transfer element
                    document.getElementById('shoppingCartZone')
                        .appendChild(document.getElementById(data));

                    // Update the totals
                    updateTotalCost();
                    updateTotalEntries();
                });

            // Add 'click' listener for the checkout button
            document.getElementById('btnCheckOut').addEventListener('click',
                () => {
                    /* The logic for the entire checkout process. Checks for
                        changes, and calls DELETE on the checkout'd entries. */

                    // Get the current shopping list on disk
                    getShoppingList(shoppingList => {
                        // Check if the lists are the same
                        if (JSON.stringify(shoppingList) ===
                            JSON.stringify(originalShoppingList)) {
                            const shoppingCart = document
                                .querySelector('#shoppingCartZone');
                            const shoppingCartEntries = shoppingCart.childNodes;

                            // Catch an empty shopping cart
                            if (shoppingCartEntries.length === 1) {
                                return;
                            }

                            let xhr; // Storage for adding fetch promises
                            shoppingCartEntries.forEach(entry => {
                                if (entry.nodeName === 'DIV') { // Ignore <br /> tags
                                    const productName = entry
                                              .querySelector('.productName')
                                              .textContent.split(': ')[1];

                                    // Call the DELETE inside the REST API
                                    // URL is defined by razor, deals with possible format errors
                                    xhr = fetch(`@Url.Action("", "api/Rest", new {}, null)/${productName}`,
                                        {
                                            method: 'delete'
                                        });
                                }
                            });
                            // xhr contains the **most recent** fetch request
                            // made before exiting the loop. I then add a
                            // promise to that fetch request, that allows me
                            // to trigger a reload only when the final fetch
                            // has been completed
                            xhr.then(() => location.reload());
                        } else {
                            // Catch shopping list changing
                            alert('The shopping list has been modified. Please ' +
                                'refresh the page to get the newest list.');
                        }
                    });
                });
            // Display the actual shopping list
            getShoppingList(displayShoppingList);
        })();
    </script>
}