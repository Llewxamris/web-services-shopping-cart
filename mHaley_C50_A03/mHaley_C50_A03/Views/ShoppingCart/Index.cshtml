
@{
    ViewBag.Title = "Index";
}

@Html.Partial("~/Views/Shared/_Header.cshtml")

<h2>Index</h2>
<div class="gridContainer">
<div id="shoppingList">
    <h2>Shopping List</h2>
    <div id="shoppingListZone">
    </div>
</div>

<div id="shoppingCart">
    <h1>Cart</h1>
    <div id="shoppingCartZone">
    </div>
</div>

    <div id="totals">
        <h3>Total Items:</h3><span id="totalEntries"></span>
        <h3>Total Price:</h3><span id="totalValue"></span>
    </div>
    <div id="checkOut">
        <input type="button" id="btnCheckOut" value="Check Out"/>
</div>
    </div>

@section Scripts {
    @Scripts.Render("~/Scripts/jquery-1.10.2.min.js")

    @* ReSharper disable once Mvc.ControllerNotResolved *@
    <script>
        let originalShoppingList; // NAUGHTY

        function ShoppingListEntry(quantity, name, price, category) {
            this.Quantity = quantity;
            this.ProductName = name;
            this.ProductPrice = price;
            this.ProductCategory = category;
        };

        function displayShoppingList(shoppingListJson) {
            originalShoppingList = shoppingListJson;
            shoppingListJson.forEach((obj) => {
                const entryDiv = document.createElement("div");
                const quantitySpan = document.createElement("div");
                const nameSpan = document.createElement("div");
                const priceSpan = document.createElement("div");
                const categorySpan = document.createElement("div");
                const breakTag = document.createElement('br');

                entryDiv.id = obj.ProductName;
                entryDiv.draggable = true;
                entryDiv.addEventListener('dragstart',
                    ev => {
                        ev.dataTransfer.setData("text/plain", ev.target.id);
                        ev.dropEffect = 'move';
                    });

                quantitySpan.className = 'quantity';
                nameSpan.className = 'productName';
                priceSpan.className = 'productPrice';
                categorySpan.className = 'productCategory';

                quantitySpan.textContent = `Quantity: ${obj.Quantity}`;
                nameSpan.textContent = `Name: ${obj.ProductName}`;
                priceSpan.textContent = `Price: ${obj.ProductPrice}`;
                categorySpan.textContent = `Category: ${obj.ProductCategory}`;


                entryDiv.appendChild(quantitySpan);
                entryDiv.appendChild(nameSpan);
                entryDiv.appendChild(priceSpan);
                entryDiv.appendChild(categorySpan);
                entryDiv.appendChild(categorySpan);
                entryDiv.appendChild(breakTag);

                document.getElementById("shoppingListZone").appendChild(entryDiv);
            });


            document.getElementById("totalValue").innerText = 0.00;
            document.getElementById("totalEntries").innerText = 0;
        }

        function getShoppingList(callback) {
            // ReSharper disable once PossiblyUnassignedPropertys
            // ReSharper disable once UseOfImplicitGlobalInFunctionScope
            fetch('@Url.Action("", "api/Rest", new {}, null)')
                .then(response => response.json())
                .then(json => {
                    callback(json);
                });
        }

        function calculateTotalCost(entries) {
            let totalCost = 0.0;

            entries.forEach(obj => {
                totalCost += obj.ProductPrice * obj.Quantity;
            });

            return totalCost;
        }

        function updateTotalCost() {
            const shoppingCartZone = document.getElementById('shoppingCartZone');
            const shoppingCartEntries = shoppingCartZone.childNodes;
            let totalCost = 0.0;

            shoppingCartEntries.forEach(entry => {
                if (entry.nodeType === 1) {
                    const price = entry.querySelector('.productPrice').innerText.split(' ')[1];
                    const quantity = entry.querySelector('.quantity').innerText.split(' ')[1];
                    totalCost += parseFloat(price) * parseFloat(quantity);
                }
            });
            document.getElementById("totalValue").innerText = totalCost.toFixed(2);
        }

        function updateTotalEntries() {
            const shoppingCartZone = document.getElementById('shoppingCartZone');
            const shoppingCartEntries = shoppingCartZone.childNodes;
            let totalEntries = 0;

            shoppingCartEntries.forEach(entry => {
                if (entry.nodeType === 1) {
                    totalEntries++;
                }
            });
            document.getElementById("totalEntries").innerText = totalEntries;
        }

        (() => {
            "use strict";
            document.getElementById('shoppingListZone').addEventListener('dragover',
                ev => {
                    ev.preventDefault();
                    ev.dataTransfer.dropEffect = "move";
                });

            document.getElementById('shoppingListZone').addEventListener('drop',
                ev => {
                    ev.preventDefault();
                    var data = ev.dataTransfer.getData("text");
                    document.getElementById('shoppingListZone').appendChild(document.getElementById(data));
                    updateTotalCost();
                    updateTotalEntries();
                });

            document.getElementById("shoppingCartZone").addEventListener('dragover',
                ev => {
                    ev.preventDefault();
                    ev.dataTransfer.dropEffect = "move";
                });

            document.getElementById('shoppingCartZone').addEventListener('drop',
                ev => {
                    ev.preventDefault();
                    var data = ev.dataTransfer.getData("text");
                    document.getElementById('shoppingCartZone').appendChild(document.getElementById(data));
                    updateTotalCost();
                    updateTotalEntries();
                });

            document.getElementById('btnCheckOut').addEventListener('click',
                () => {
                    getShoppingList(shoppingList => {
                        if (JSON.stringify(shoppingList) === JSON.stringify(originalShoppingList)) {
                            const shoppingCart = document
                                .querySelector('#shoppingCartZone');
                            console.log(shoppingCart);
                            const shoppingCartEntries = shoppingCart.childNodes;

                            if (shoppingCartEntries.length === 1) {
                                return;
                            }
                            let xhr;
                            shoppingCartEntries.forEach(entry => {
                                if (entry.nodeName === 'DIV') {
                                    const productName = entry.querySelector('.productName').textContent.split(': ')[1];
                                    xhr = fetch(`@Url.Action("", "api/Rest", new {}, null)/${productName}`,
                                        {
                                            method: 'delete'
                                        });
                                }
                            });
                            xhr.then(() => location.reload());
                        } else {
                            alert('The shopping list has been modified. Please ' +
                                'refresh the page to get the newest list.');
                        }
                    });
                });
            getShoppingList(displayShoppingList);
        })();
    </script>
}